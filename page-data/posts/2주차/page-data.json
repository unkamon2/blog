{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2주차","webpackCompilationHash":"89e0bfc8db9956cfe94e","result":{"data":{"markdownRemark":{"id":"d50ac0b8-34e3-5653-9603-95caf54192fc","html":"<h1 id=\"2주차\"><a href=\"#2%EC%A3%BC%EC%B0%A8\" aria-label=\"2주차 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2주차</h1>\n<h2 id=\"document--window의-객체로-window-생략하고-사용가능\"><a href=\"#document--window%EC%9D%98-%EA%B0%9D%EC%B2%B4%EB%A1%9C-window-%EC%83%9D%EB%9E%B5%ED%95%98%EA%B3%A0-%EC%82%AC%EC%9A%A9%EA%B0%80%EB%8A%A5\" aria-label=\"document  window의 객체로 window 생략하고 사용가능 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Document ; window의 객체로, window 생략하고 사용가능.</h2>\n<p>document.createDocumentFragment() -> 자바스크립트로 document의 태그를 조작하는 것은 매우 성능이 떨어집니다. 특히 여러 태그를 반복문을 통해 동시에 추가할 때는요. 이럴 때 미리 가짜 document를 만들어서 여기에 추가를 한 후, 한 번에 document에 추가합니다. 이러면 진짜 document는 한 번만 조작하면 돼서 성능에 부담이 덜합니다.</p>\n<h2 id=\"dom--document-object-model\"><a href=\"#dom--document-object-model\" aria-label=\"dom  document object model permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM ; Document Object Model.</h2>\n<p>Node는 태그 노드와 텍스트 노드 전체를 가리키고, Element는 텍스트 노드를 제외하고, 흔히 생각하는 태그(’&#x3C;>‘같은)만 가리킵니다. 따라서 태그만 검색하고 싶을 때는 Element가 붙은 메소드를 선택해야합니다.</p>\n<h2 id=\"날짜와-정규표현식--1월이-0-일요일이-0\"><a href=\"#%EB%82%A0%EC%A7%9C%EC%99%80-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D--1%EC%9B%94%EC%9D%B4-0-%EC%9D%BC%EC%9A%94%EC%9D%BC%EC%9D%B4-0\" aria-label=\"날짜와 정규표현식  1월이 0 일요일이 0 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>날짜와 정규표현식 ; 1월이 0, 일요일이 0</h2>\n<h2 id=\"객체지향\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5\" aria-label=\"객체지향 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체지향;</h2>\n<p>prototype은 모든 객체가 공유하고 있어서 한 번만 만들어지지만, this에 넣은 것은 객체 하나를 만들 때마다 메소드도 하나씩 만들어지기 때문에 불필요한 메모리 낭비가 발생합니다.</p>\n<h2 id=\"scope-함수의-범위-스코프-체인---가장-가까운-범위부터-찾아가는것\"><a href=\"#scope-%ED%95%A8%EC%88%98%EC%9D%98-%EB%B2%94%EC%9C%84-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B2%B4%EC%9D%B8---%EA%B0%80%EC%9E%A5-%EA%B0%80%EA%B9%8C%EC%9A%B4-%EB%B2%94%EC%9C%84%EB%B6%80%ED%84%B0-%EC%B0%BE%EC%95%84%EA%B0%80%EB%8A%94%EA%B2%83\" aria-label=\"scope 함수의 범위 스코프 체인   가장 가까운 범위부터 찾아가는것 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>scope; 함수의 범위. 스코프 체인 -> 가장 가까운 범위부터 찾아가는것</h2>\n<p>lexical scoping -> 스코프는 함수를 선언 할때 생기는 것으로, 선언시에 스코프 체인에 따른 참조를 말하는듯?\nIIFE(즉시 호출 함수 표현식), 모듈 패턴 -> ‘Iffy’ 라고 발음합니다.(잎피…?)\n사용 예 - (function () { console.log(‘Hello World’) })(); // Hello World\n리터럴의 조건은</p>\n<p>예약어 function (필수)\n함수이름 (선택)\n매개변수 집합 (필수)\n함수 본문 (필수)\n인데, 2.함수이름이 ‘선택’조건이지만 함수 선언시에 이름이 없을 경우 에러가 납니다.\n함수이름의 선택 조건은 2가지가 있는데,</p>\n<p>함수를 할당 받을 변수를 지정\n함수를 즉시 호출\n와 같습니다.\n예)</p>\n<p>const add = function (a, b) { return a + b };\n(function(a, b) { return a + b })(1, 2); // 3\n이중에서 2번 예가 IIFE 의 예가 됩니다.\n즉시 실행 함수의 방법으론 위의 2번처럼 함수를 ()로 묶어주거나,\n+function(a, b) { return console.log(a + b) }(1, 2) 처럼 연산자를 앞에 붙여도 가능합니다.</p>\n<h2 id=\"실행-컨텍스트-실행-환경\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%8B%A4%ED%96%89-%ED%99%98%EA%B2%BD\" aria-label=\"실행 컨텍스트 실행 환경 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 컨텍스트; 실행 환경..?</h2>\n<p>소스의 순서 : 코드 실행 -> 전역 컨텍스트 생성 -> 함수 호출 -> 함수 컨텍스트 생성 -> 변수객체, scope chain, this 생성 ->함수 실행 -> 함수 컨텍스트 사라짐 -> 페이지 종료 -> 전역 컨텍스트 사라짐 -> 클로저</p>\n<p>호이스팅 -> 변수를 선언하고 초기화 했을 때, 선언 부분이 최상단으로 끌어올려지는 현상. 함수 표현식이 아니고 함수 선언식일 경우 호이스팅 현상 생김.</p>\n<p>함수 표현식 : 일반적인 함수 선언이 아닌, javascript에서 사용하는 것으로,\nvar 함수명 = function () { 구현 로직 };와 같은 표현을 뜻함.\n=> 함수 선언식 : 일반적인 함수 선언 방법. function 함수명(){}</p>\n<p>클로저 -> 비공개 변수를 가질 수 있는 환경에 있는 함수</p>\n<h2 id=\"콜백\"><a href=\"#%EC%BD%9C%EB%B0%B1\" aria-label=\"콜백 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백;</h2>\n<p>함수 중 setTimeout({},초); 를 설정 해둬야 비동기적으로 실행됨.</p>\n<h2 id=\"함수의-메소드와-아규먼트-\"><a href=\"#%ED%95%A8%EC%88%98%EC%9D%98-%EB%A9%94%EC%86%8C%EB%93%9C%EC%99%80-%EC%95%84%EA%B7%9C%EB%A8%BC%ED%8A%B8-\" aria-label=\"함수의 메소드와 아규먼트  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수의 메소드와 아규먼트 ;</h2>\n<p>유사배열…? : 배열과 같이 [] 형식으로 표시되지만, 객체로 구성되어 배열의 메소드를 사용할 수 없음. 배열의 프로토타입에서 call이나 apply 로 사용 가능</p>\n<h2 id=\"객체-복사\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%B3%B5%EC%82%AC\" aria-label=\"객체 복사 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 복사;</h2>\n<p>hasOwnProperty??? : 객체가 특정 property(html DOM안에서 attribute를 가리키는 표현)를 가지고 있는지에 대한 여부를 반환. 본래의 것이 아닌 프로토타입으로 넣은 경우에는 false를 반환한다.</p>\n<h2 id=\"패턴\"><a href=\"#%ED%8C%A8%ED%84%B4\" aria-label=\"패턴 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패턴;</h2>\n<p>모듈패턴, 싱글톤 패턴, 생성자 패턴 모듈패턴 : IIFE 싱글톤패턴 : 객체 리터럴이 대표적인 예</p>\n<h2 id=\"함수형-프로그래밍\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"함수형 프로그래밍 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 프로그래밍;</h2>\n<p>순수 함수..??? : 동일한 인자를 주면 항상 동일한 결과값을 리턴하고, 외부의 값을 변경하지 않는 함수.</p>\n<h2 id=\"재귀와-메모이제이션\"><a href=\"#%EC%9E%AC%EA%B7%80%EC%99%80-%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98\" aria-label=\"재귀와 메모이제이션 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재귀와 메모이제이션;</h2>\n<p>분할 정복 알고리즘…? : 문제를 나눌 수 없을 때까지 나누어서 각각을 풀면서 다시 합병하여 문제의 답을 찾는 알고리즘.\n알고리즘을 설계하는 요령 3가지<br/></p>\n<ol>\n<li>Divide : 문제가 분할이 가능한 경우, 2개 이상의 문제로 나눈다.</li>\n<li>Conquer : 나누어진 문제가 여전히 분할이 가능하면, 또 다시 Divide를 수행한다. 그렇지 않으면 문제를 푼다.</li>\n<li>Combine : Conquer한 문제들을 통합하여 원래 문제의 답을 얻는다.</li>\n</ol>","fields":{"slug":"/posts/2주차","tagSlugs":["/tag/web/","/tag/study/","/tag/web-development/"]},"frontmatter":{"date":"2019-08-28T22:40:32.169Z","description":"JavaScript","tags":["web","study","Web Development"],"title":"2주차","socialImage":"/media/42-line-bible.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/2주차"}}}